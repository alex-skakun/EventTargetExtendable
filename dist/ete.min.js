/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__EventTargetExtendable__ = __webpack_require__(1);


window['EventTargetExtendable'] = __WEBPACK_IMPORTED_MODULE_0__EventTargetExtendable__["a" /* EventTargetExtendable */];

/***/ }),
/* 1 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__EventCollection__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__EventCollectionItem__ = __webpack_require__(3);




const EVENT_LISTENERS = new __WEBPACK_IMPORTED_MODULE_0__EventCollection__["a" /* EventCollection */]();

class EventTargetExtendable {
    /**
     * @param {Array<string>} eventsArray
     */
    constructor (eventsArray) {
        if (Array.isArray(eventsArray)) {
            let listeners = {};
            eventsArray.forEach(function (eventName) {
                let event = eventName.trim().toLowerCase(),
                    property = 'on' + event;
                Object.defineProperty(this, property, {
                    enumerable: true,
                    configurable: false,
                    get: function () {
                        return listeners[event] || null;
                    },
                    set: function (listener) {
                        let oldListener = listeners[event];
                        if (oldListener) {
                            this.removeEventListener(event, oldListener);
                        }
                        if (typeof listener === 'function') {
                            listeners[event] = listener;
                            this.addEventListener(event, listener);
                        }
                    }
                });
            }, this);
        }
    }

    addEventListener (eventType, listener) {
        if (typeof listener === 'function') {
            let targetItem = findTargetItem(this);
            return targetItem.addListener(eventType, listener);
        }
        return false;
    }

    removeEventListener (eventType, listener) {
        let targetItem = findTargetItem(this);
        let result = targetItem.removeListener(eventType, listener);
        EVENT_LISTENERS.checkEntries(this);
        return result;
    }

    dispatchEvent (eventType) {
        let targetItem = findTargetItem(this),
            listeners = targetItem.getListenersByType(eventType),
            args = Array.prototype.slice.call(arguments, 1),
            _this = this;
        if (listeners) {
            let forExecution = [];
            listeners.forEach(function (listener) {
                if (typeof listener === 'function') {
                    forExecution.push(listener);
                }
            });
            forExecution.forEach(function (listener) {
                listener.apply(_this, args);
            });
        }
    }

    removeAllListeners (type) {
        let targetItem = findTargetItem(this);
        if (type) {
            let result =  targetItem.removeListeners(type);
            EVENT_LISTENERS.checkEntries(this);
            return result;
        } else {
            return EVENT_LISTENERS.remove(targetItem);
        }
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = EventTargetExtendable;



/**
 * @param {object} target
 * @returns {EventCollectionItem}
 */
function findTargetItem (target) {
    let allForThisTarget = EVENT_LISTENERS.findForTarget(target);
    if (!allForThisTarget) {
        allForThisTarget = new __WEBPACK_IMPORTED_MODULE_1__EventCollectionItem__["a" /* EventCollectionItem */](target);
        EVENT_LISTENERS.add(allForThisTarget);
    }
    return allForThisTarget;
}



/***/ }),
/* 2 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
class EventCollection {
    constructor () {
        this.collection = new Map();
    }

    /**
     * @param {object} target
     * @returns {EventCollectionItem}
     */
    findForTarget (target) {
        return this.collection.get(target) || null;
    }

    add (item) {
        this.collection.set(item.target, item);
    }

    remove (item) {
        return this.collection.delete(item.target);
    }

    checkEntries (target) {
        let targetItem = this.findForTarget(target);
        if (targetItem) {
            let eventCount = Object.keys(targetItem.listeners).length;
            if (eventCount === 0) {
                this.remove(targetItem);
            }
        }
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = EventCollection;


/***/ }),
/* 3 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
class EventCollectionItem {
    constructor (target) {
        this.target = target;
        this.listeners = {};
    }

    getListenersByType (type) {
        let listeners = this.listeners[type];
        if (!listeners) {
            listeners = EventCollectionItem.createListenersCollection();
            this.listeners[type] = listeners;
        }
        return listeners;
    }

    addListener (type, listener) {
        let listeners = this.getListenersByType(type);
        if (!listeners.has(listener)) {
            listeners.add(listener);
            return true;
        }
        return false;
    }

    removeListener (type, listener) {
        let listeners = this.getListenersByType(type);
        let result = listeners.delete(listener);
        this.checkEntries();
        return result;
    }

    removeListeners (type) {
        let listeners = this.getListenersByType(type);
        listeners.clear();
        this.checkEntries();
        return true;
    }

    checkEntries () {
        Object.keys(this.listeners).forEach(eventType => {
            if (this.listeners[eventType].size === 0) {
                delete this.listeners[eventType];
            }
        });
    }

    static createListenersCollection () {
        return new Set();
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = EventCollectionItem;




/***/ })
/******/ ]);
//# sourceMappingURL=ete.min.js.map